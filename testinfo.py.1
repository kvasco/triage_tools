#!/bin/python3
##############################################################################
# testinfo - an improved regression reporting script
##############################################################################

"""
To Do:
[ ] Complete adding entries to dictionary
[ ] Print updated dictionary object
[ ] Seed regex list file with actual substitution patterns
"""

import re
import argparse
import json
import os
import sys

# testinfo specific modules
import utils # the testinfo utilities (method) library
import experiments # a library of demo/experimental code snippets


# Command line argument parser
parser = argparse.ArgumentParser(description='Process a file and apply regex patterns.')
parser.add_argument('filename', type=str, help='Name of the JSON file to process')
parser.add_argument('--json_re_file', type=str, help='JSON file with regex patterns')
parser.add_argument('--eec', action='store_true', help='Execute Experimental Code snippets')
parser.add_argument('--tag', action='store_true', default=False, help='Add timestamp to output file(s)')
parser.add_argument('--dbg', action='store_true', help='Execute debug content')
parser.add_argument('-v', '--verbosity', default=0, type=int, choices=[0, 1, 2, 3, 4], help='Increase output verbosity')
args = parser.parse_args()

# Module variables
regex_list = None
if (args.verbosity > 3):
    print(f'Default check of regex_list: {regex_list}')


print() # add a blank line after the command for clarity

if (args.verbosity > 2):
    utils.print_separator()
    print(f'Type of args from parser.parse_args(): {type(args)}')
    print(f'Type of args.verbosity from parser.parse_args(): {type(args.verbosity)}')

# Pass args to utils and experiments
utils.set_utils_args(args)
experiments.set_experiments_args(args)

if (args.verbosity > 3):
    utils.print_separator()
    print(f'ti: util.args: {utils.args}')

# Check if a JSON file is specified and load regex list from it
if args.json_re_file:
    regex_list = utils.load_from_json(args.json_re_file)

if (args.verbosity > 3):
    print(f'Inital check of regex_list: {regex_list}')

regex_list = utils.verify_regex_list(regex_list)

if args.dbg:
    print(f'regex_list:')
    utils.print_list_of_lists(regex_list)

# Grab the filename provided by the user in the arguments
file_name = args.filename
if (args.verbosity > 3):
    print(f'Type of file_name: {type(file_name)}')

file_content = utils.read_file(file_name)

if (args.verbosity > 3):
    # Print the first N lines of content
    utils.print_lines(file_content, 3)

# Apply the regular expressions to the content
modified_content = utils.apply_regex_list(file_content, regex_list)
if (args.verbosity > 3):
    print(f'Type of modified_content: {type(modified_content)}')

utils.write_file(modified_content, file_name, '.new', args.tag)

if (args.verbosity > 0):
    print(f'Regular expressions applied successfully. Modified content saved!')

# Get model build pass/fail counts
# Get test pass/fail counts

json_data = utils.print_json_objects(file_content)

if args.dbg:
    utils.print_separator()
    #utils.print_json_objects(file_content, 3) # first three objects
    #utils.print_json_objects(file_content, num_objects=2, offset=2) # first two vcs_sim
    utils.print_json_objects(file_content, num_objects=3, offset=1) # one vcs_comp and the first two vcs_sim

utils.process_list(json_data)

# Check if the experimental code snippets should be run
if args.eec:
    experiments.execute_code_snippets()
